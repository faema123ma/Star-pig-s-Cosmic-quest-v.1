document.addEventListener('DOMContentLoaded', () => {
    const gameContainer = document.getElementById('game-active-screen');
    const gameOverScreen = document.getElementById('game-over-screen');
    const winScreen = document.getElementById('win-screen');
    const scoreText = document.getElementById('score-text');
    const streakText = document.getElementById('streak-text');
    const livesText = document.getElementById('lives-text');
    const timerText = document.getElementById('timer-text');
    const progressText = document.getElementById('progress-text');
    const constellationImg = document.getElementById('constellation-img');
    const answerButtonsContainer = document.getElementById('answer-buttons');
    const finalScoreText = document.getElementById('final-score');
    const highScoreText = document.getElementById('high-score-text');
    const correctSound = document.getElementById('correct-sound');
    const incorrectSound = document.getElementById('incorrect-sound');
    const characterImg = document.getElementById('character-img');
    const characterSpeech = document.getElementById('character-speech');
    const CHARACTER_COUNT = 8;
    const CONSTELLATIONS_PER_FORM = 11;
    const characterImages = Array.from({length: CHARACTER_COUNT}, (_, i) => `images/character${i+1}.png`);
    const praiseMessages = [
        "‡πÇ‡∏≠‡πâ‡πÇ‡∏´! ‡πÄ‡∏Å‡πà‡∏á‡∏à‡∏±‡∏á‡∏ß‡∏∞‡πÄ‡∏ô‡∏µ‡πà‡∏¢", "‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ ‡πÑ‡∏õ‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏ß‡∏¢‡πÄ‡∏•‡∏¢‡∏°‡∏±‡πâ‡∏¢", "‡∏™‡∏°‡∏≠‡∏á‡πÑ‡∏ß‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ï‡∏¥‡∏î‡∏à‡∏£‡∏ß‡∏î", "‡∏ô‡∏µ‡πà‡∏°‡∏±‡∏ô‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏ä‡∏±‡∏î‡πÜ", "‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏à‡∏ô‡∏á‡∏á‡πÄ‡∏≠‡∏á", "‡∏™‡∏∏‡∏î‡∏¢‡∏≠‡∏î! ‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏™‡∏°‡∏≠‡∏á‡∏´‡∏ô‡πà‡∏≠‡∏¢", "‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤", "‡πÄ‡∏Å‡πà‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞", "‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏à‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏£‡πâ‡∏≠‡∏á‡∏ß‡πâ‡∏≤‡∏ß", "‡∏â‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå", "‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏¥‡∏î", "‡πÇ‡∏î‡∏ô‡πÉ‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£", "‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ ‡πÄ‡∏≠‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÑ‡∏õ‡πÄ‡∏•‡∏¢", "‡∏™‡∏°‡∏≠‡∏á‡∏•‡∏∑‡πà‡∏ô‡∏õ‡∏£‡∏∑‡πä‡∏î", "‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ô‡πà", "‡πÇ‡∏≠‡πâ‡πÇ‡∏´! ‡∏ï‡∏≠‡∏ö‡πÑ‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏ô‡πá‡∏ï‡∏ö‡πâ‡∏≤‡∏ô", "‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏à‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏ö‡∏°‡∏∑‡∏≠", "‡∏ô‡∏µ‡πà‡∏°‡∏±‡∏ô‡∏û‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå", "‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏Ç‡∏≠‡∏Ñ‡∏≤‡∏£‡∏ß‡∏∞", "‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏à‡∏ô‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡∏¢‡∏±‡∏á‡∏ï‡∏Å‡πÉ‡∏à"
    ];
    const tryAgainMessages = [
        "‡πÄ‡∏≠‡πâ‡∏≤! ‡πÉ‡∏à‡πÄ‡∏¢‡πá‡∏ô‡πÜ ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà", "‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏ß‡∏ß‡∏ß", "‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà", "‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£ ‡∏•‡∏∏‡∏¢‡∏ï‡πà‡∏≠", "‡∏™‡∏°‡∏≠‡∏á‡∏•‡∏∑‡πà‡∏ô‡πÑ‡∏õ‡∏´‡∏ô‡πà‡∏≠‡∏¢", "‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏¥‡∏°‡∏û‡∏•‡∏±‡∏á", "‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏ô‡∏∞", "‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏´‡∏•‡πà‡∏≠", "‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£ ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏Å‡πá‡∏ñ‡∏π‡∏Å", "‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏Ç‡∏≥‡πÅ‡∏´‡πâ‡∏á", "‡πÄ‡∏≠‡πä‡∏∞! ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡∏á‡πà‡∏ß‡∏á", "‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏ó‡πà", "‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ü‡∏•‡∏∏‡∏Ñ", "‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏¥‡∏ô‡∏Ç‡πâ‡∏≤‡∏ß", "‡∏™‡∏°‡∏≠‡∏á‡πÄ‡∏ö‡∏•‡∏≠‡πÑ‡∏õ‡∏ô‡∏¥‡∏î", "‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å", "‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£ ‡∏™‡∏π‡πâ‡∏ï‡πà‡∏≠", "‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏Ç‡∏≠‡∏Æ‡∏≤", "‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏ô‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô", "‡∏ï‡∏≠‡∏ö‡∏ú‡∏¥‡∏î‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏™‡πÑ‡∏ï‡∏•‡πå"
    ];

    let allConstellations = [];
    let unansweredQuestions = [];
    let score = 0, lives = 5, streak = 0, timer = 15, timerInterval;
    const currentLang = localStorage.getItem('lang') || 'th'; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å

    async function initializeGame() {
        try {
            // ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            const response = await fetch(`data/constellations_${currentLang}.json`);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            allConstellations = await response.json();
            if (allConstellations.length < 3) {
                 throw new Error("Not enough constellation data to start the game.");
            }
            startGame();
        } catch (error) {
            console.error("Could not load constellation data file:", error);
            if(gameContainer) {
                const errorMsg = currentLang === 'en'
                    ? "<p style='color:white; text-align: center;'>Error loading game data.<br>Please try refreshing the page.</p>"
                    : "<p style='color:white; text-align: center;'>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°<br>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>";
                gameContainer.innerHTML = errorMsg;
            }
        }
    }

    function startGame() {
        score = 0; lives = 5; streak = 0;
        unansweredQuestions = [...allConstellations];

        gameContainer.style.display = 'flex';
        gameOverScreen.style.display = 'none';
        if (winScreen) winScreen.style.display = 'none';

        updateUI();
        loadNextQuestion();
    }

    function updateCharacter() {
        const passed = allConstellations.length - unansweredQuestions.length;
        const formIndex = Math.min(Math.floor(passed / CONSTELLATIONS_PER_FORM), CHARACTER_COUNT - 1);
        if (characterImg) characterImg.src = characterImages[formIndex];
    }

    function loadNextQuestion() {
        if (unansweredQuestions.length === 0) {
            winGame();
            return;
        }

        const questionIndex = Math.floor(Math.random() * unansweredQuestions.length);
        const question = unansweredQuestions[questionIndex];

        const incorrectChoices = [];
        while (incorrectChoices.length < 2) {
            const randomIndex = Math.floor(Math.random() * allConstellations.length);
            const randomConstellation = allConstellations[randomIndex];
            if (randomConstellation.name !== question.name && !incorrectChoices.includes(randomConstellation.name)) {
                incorrectChoices.push(randomConstellation.name);
            }
        }

        const choices = [question.name, ...incorrectChoices].sort(() => Math.random() - 0.5);

        constellationImg.src = question.image_url;
        answerButtonsContainer.innerHTML = '';

        choices.forEach(choice => {
            const button = document.createElement('button');
            button.className = 'answer-btn';
            button.textContent = choice;
            button.addEventListener('click', () => handleAnswerSelection(button, question.name));
            answerButtonsContainer.appendChild(button);
        });

        startTimer(question.name);
        updateCharacter();
    }

    function handleAnswerSelection(selectedButton, correctAnswer) {
        clearInterval(timerInterval);
        const isCorrect = selectedButton.textContent === correctAnswer;

        if (isCorrect) {
            score += 10 + streak;
            streak++;
            playSound(correctSound);
            unansweredQuestions = unansweredQuestions.filter(q => q.name !== correctAnswer);
            if (characterSpeech) {
                const msg = praiseMessages[Math.floor(Math.random() * praiseMessages.length)];
                characterSpeech.textContent = msg;
            }
        } else {
            lives--;
            streak = 0;
            playSound(incorrectSound);
            if (characterSpeech) {
                const msg = tryAgainMessages[Math.floor(Math.random() * tryAgainMessages.length)];
                characterSpeech.textContent = msg;
            }
        }

        highlightAnswers(correctAnswer, selectedButton);
        updateUI();

        if (lives <= 0) {
            setTimeout(gameOver, 2000);
        } else if (unansweredQuestions.length === 0) {
            setTimeout(winGame, 2000);
        } else {
            setTimeout(loadNextQuestion, 2000);
        }
    }
    
    function highlightAnswers(correctAnswer, selectedButton) {
        Array.from(answerButtonsContainer.children).forEach(btn => {
            btn.disabled = true;
            if (btn.textContent === correctAnswer) {
                btn.classList.add('correct');
            } else if (btn === selectedButton) {
                btn.classList.add('incorrect');
            }
        });
    }

    function updateUI() {
        scoreText.textContent = score;
        streakText.textContent = streak;
        if (progressText) {
            progressText.textContent = `${allConstellations.length - unansweredQuestions.length}/${allConstellations.length}`;
        }
        livesText.innerHTML = '';
        for (let i = 0; i < 5; i++) {
            if (i < lives) {
                livesText.innerHTML += `<span class="heart-animate">‚ù§Ô∏è</span>`;
            } else {
                livesText.innerHTML += 'üñ§';
            }
        }
        // Trigger reflow for animation
        const hearts = livesText.querySelectorAll('.heart-animate');
        hearts.forEach(heart => {
            heart.classList.remove('heart-animate');
            void heart.offsetWidth; // force reflow
            heart.classList.add('heart-animate');
        });
    }

    function startTimer(correctAnswer) {
        clearInterval(timerInterval);
        timer = 15;
        timerText.textContent = timer;
        timerInterval = setInterval(() => {
            timer--;
            timerText.textContent = timer;
            if (timer <= 0) {
                clearInterval(timerInterval);
                handleTimeout(correctAnswer);
            }
        }, 1000);
    }

    function handleTimeout(correctAnswer) {
        lives--;
        streak = 0;
        playSound(incorrectSound);
        highlightAnswers(correctAnswer, null);
        updateUI();
        if (characterSpeech) {
            const msg = tryAgainMessages[Math.floor(Math.random() * tryAgainMessages.length)];
            characterSpeech.textContent = msg;
        }
        if (lives <= 0) {
            setTimeout(gameOver, 2000);
        } else {
            setTimeout(loadNextQuestion, 2000);
        }
    }

    function gameOver() {
        clearInterval(timerInterval);
        gameContainer.style.display = 'none';
        gameOverScreen.style.display = 'flex';
        finalScoreText.textContent = score;
        let currentHighScore = parseInt(localStorage.getItem('moodaoHighScore') || '0', 10);
        if (score > currentHighScore) {
            currentHighScore = score;
            localStorage.setItem('moodaoHighScore', currentHighScore);
        }
        highScoreText.textContent = currentHighScore;
    }

    function winGame() {
        clearInterval(timerInterval);
        gameContainer.style.display = 'none';
        if(winScreen) winScreen.style.display = 'flex';
    }

    function playSound(sound) {
        if (sound) {
            sound.currentTime = 0;
            sound.play().catch(error => console.log("Sound play failed:", error));
        }
    }

    initializeGame();
});